it(1);
        }
        createFolder(rootPath.c_str());
        

        int client_sock , c , *new_sock;
        struct sockaddr_in server , client;
        struct sigaction sa;

        sa.sa_handler = sigchld_handler; // reap all dead processes
        sigemptyset(&sa.sa_mask);
        sa.sa_flags = SA_RESTART;
        if (sigaction(SIGCHLD, &sa, NULL) == -1) {
                perror("sigaction");
                exit(1);
        }

        //Create socket
        socket_desc = socket(AF_INET , SOCK_STREAM , 0);
        if (socket_desc == -1)
        {
                printf("Could not create socket");
        }
        puts("Socket created");

        int optval = 1;
        setsockopt(socket_desc, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof optval); 

        //Prepare the sockaddr_in structure
        server.sin_family = AF_INET;
        server.sin_addr.s_addr = INADDR_ANY;
        server.sin_port = htons( port );

        //Bind
        if( bind(socket_desc,(struct sockaddr *)&server , sizeof(server)) < 0)
        {
                //print the error message
                perror("bind failed. Error");
                return 1;
        }
        puts("bind done");

        //Listen
        listen(socket_desc , 3);


        //Accept and incoming connection
        puts("Waiting for incoming connections...");
        c = sizeof(struct sockaddr_in);
        while( (client_sock = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&c)) )
        {
                //std::cout << client_sock << std::endl;
                int yes = 1;
                if ( setsockopt(client_sock, SOL_SOCKET, SO_KEEPALIVE, &yes, sizeof(int)) == -1 ) {
                        perror("Set alive fail!");
                        exit(1);
                }
                // puts("Connection accepted");
                pthread_t sniffer_thread;
                new_sock = (int*)malloc(1);
                *new_sock = client_sock;

                if( pthread_create( &sniffer_thread , NULL ,  connection_handler , (void*) new_sock) < 0)
                {
                        perror("could not create thread");
                        return 1;
                }

                //Now join the thread , so that we dont terminate before the thread
                //pthread_join( sniffer_thread , NULL);//debug
                // puts("Handler assigned");

        }

        if (client_sock < 0)
        {
                perror("accept failed");
                return 1;
        }
        close(socket_desc);

}
void decode(char *buf, int len) {
        //for ( int i = len-2 ; i >= 0 ; --i )
        //        buf[i] ^= buf[i+1];
}
void encode(char *buf, int len) {
        //for ( int i = 0 ; i < len-1 ; ++i )
        //        buf[i] ^= buf[i+1];
}
int recvTimeout(int sock, char *buf, int len, int timeoutSec, int timeoutUsec=0)
{
        fd_set fds;
        int n;
        struct timeval tv;

        // set up the file descriptor set
        FD_ZERO(&fds);
        FD_SET(sock, &fds);

        // set up the struct timeval for the timeout
        tv.tv_sec = timeoutS